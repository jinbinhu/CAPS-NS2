--- /home/hjb/CAPS/ns-allinone-2.35/ns-2.35/classifier/classifier-mpath.cc	2005-08-25 11:58:01.000000000 -0700
+++ /home/hjb/CAPS/ns-allinone-2.35-CAPS-dark/ns-2.35/classifier/classifier-mpath.cc	2019-05-23 23:47:37.558187397 -0700
@@ -50,17 +50,45 @@
 #endif
 
 #include "classifier.h"
-
+#include "ip.h"
+#include "tcp.h"    
+#include <stdlib.h>
+#include "random.h"   
+extern int changepath;
+int flowPath[20000];
+int lfnum = 0;
+    
 class MultiPathForwarder : public Classifier {
 public:
 	MultiPathForwarder() : ns_(0) {} 
-	virtual int classify(Packet*) {
-		int cl;
+	virtual int classify(Packet* pkt) {
+		int cl ;
 		int fail = ns_;
-		do {
-			cl = ns_++;
-			ns_ %= (maxslot_ + 1);
-		} while (slot_[cl] == 0 && ns_ != fail);
+		hdr_ip *iph = hdr_ip::access(pkt);
+		hdr_tcp *tcph = hdr_tcp::access(pkt);
+ 		int databytes = hdr_cmn::access(pkt)->size();
+//CAPS
+		if(changepath==0 && tcph->seqno() > 0 && databytes > 40){	
+			if(tcph->codeflag_ == 1) {
+				do {
+        		                cl = ns_++;
+                		        ns_ %= (maxslot_ + 1);
+                 		} while (slot_[cl] == 0 && ns_ != fail);
+			} else {
+				if(flowPath[iph->fid_] == 0) {
+					lfnum++;
+                        		flowPath[iph->fid_] = (iph->fid_ % lfnum) + 1;
+                 		        cl = flowPath[iph->fid_];  
+                		} else {
+                        		cl = flowPath[iph->fid_];
+                		}			
+			}
+		} else {
+			do {
+                                cl = ns_++;
+                                ns_ %= (maxslot_ + 1);
+                        } while (slot_[cl] == 0 && ns_ != fail);
+                }
 		return cl;
 	}
 private:
--- /home/hjb/CAPS/ns-allinone-2.35/ns-2.35/classifier/hjbextra.h	1969-12-31 16:00:00.000000000 -0800
+++ /home/hjb/CAPS/ns-allinone-2.35-CAPS-dark/ns-2.35/classifier/hjbextra.h	2019-05-23 23:47:37.594187394 -0700
@@ -0,0 +1 @@
+int changepath=0;
--- /home/hjb/CAPS/ns-allinone-2.35/ns-2.35/tcl/lib/ns-default.tcl	2010-07-03 15:45:45.000000000 -0700
+++ /home/hjb/CAPS/ns-allinone-2.35-CAPS-dark/ns-2.35/tcl/lib/ns-default.tcl	2019-05-23 23:47:37.594187394 -0700
@@ -21,7 +21,6 @@
 #    used to endorse or promote products derived from this software without
 #    specific prior written permission.
 # 
-
 # @(#) $Header: /cvsroot/nsnam/ns-2/tcl/lib/ns-default.tcl,v 1.388 2010/07/03 22:45:45 tom_henderson Exp $
 
 # THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
@@ -106,6 +105,12 @@
 
 Queue/DropTail/PriQueue set Prefer_Routing_Protocols    1
 
+#CAPS
+Queue/MYDropTail set drop_front_ false
+Queue/MYDropTail set summarystats_ false
+Queue/MYDropTail set queue_in_bytes_ false
+Queue/MYDropTail set mean_pktsize_ 500
+
 # special cmu implemented priority queue used by DSR
 CMUPriQueue set qlen_logthresh_ 10
 CMUPriQueue set fw_logthresh_ 25
@@ -824,6 +829,10 @@
 Agent set debug_ false
 Agent set class_ 0
 
+#CAPS
+Agent set shortFlowNum_ 100
+Agent set codeUnit_ 10
+
 ##Agent set seqno_ 0 now is gone
 ##Agent set class_ 0 now is gone
 
@@ -899,6 +908,9 @@
                                               # for new data transfer
 Agent/SCTP/CMT set countPFToActiveRtxms_ 0;   # count of PF->Active changes
                                               # for retransmissions
+#CAPS
+Agent/TCP set redunPkt_ 2
+Agent/TCP set lfThresholdPkt_ 67
 
 Agent/TCP set seqno_ 0
 Agent/TCP set t_seqno_ 0
@@ -1063,6 +1075,9 @@
 Agent/TCPSink set bytes_ 0
 Agent/TCPSink set ecn_syn_ false ;	# Added 2005/11/21 for SYN/ACK pkts.
 
+#CAPS
+Agent/TCPSink set PerSFPktNum_ 60;
+
 Agent/TCPSink/DelAck set interval_ 100ms
 catch {
 	Agent/TCPSink/Asym set interval_ 100ms
--- /home/hjb/CAPS/ns-allinone-2.35/ns-2.35/tcp/tcp.h	2011-08-26 12:29:57.000000000 -0700
+++ /home/hjb/CAPS/ns-allinone-2.35-CAPS-dark/ns-2.35/tcp/tcp.h	2019-05-23 23:47:37.598187396 -0700
@@ -37,6 +37,8 @@
 
 #include "agent.h"
 #include "packet.h"
+//CAPS
+#include "queue.h"
 
 //class EventTrace;
 
@@ -54,8 +56,12 @@
 	int hlen_;              /* header len (bytes) for FullTcp */
 	int tcp_flags_;         /* TCP flags for FullTcp */
 	int last_rtt_;		/* more recent RTT measurement in ms, */
-				/*   for statistics only */
-
+//CAPS
+        int codeseqno_;
+	int subseqno_;
+	int codeflag_;
+	int retranmark_;
+	
 	static int offset_;	// offset for this header
 	inline static int& offset() { return offset_; }
 	inline static hdr_tcp* access(Packet* p) {
@@ -74,6 +80,8 @@
 	int& ackno() { return (ackno_); }  
 	int& flags() { return (tcp_flags_); }
 	int& last_rtt() { return (last_rtt_); }
+	
+	
 };
 
 /* these are used to mark packets as to why we xmitted them */
@@ -175,7 +183,7 @@
 	friend class XcpEndsys;
 public:
 	TcpAgent();
-	virtual ~TcpAgent() {free(tss);}
+        virtual ~TcpAgent() {free(tss);}
         virtual void recv(Packet*, Handler*);
 	virtual void timeout(int tno);
 	virtual void timeout_nonrtx(int tno);
@@ -190,6 +198,10 @@
 	/* These two functions aid Tmix one-way TCP agents */
 	int is_closed() {return closed_;} 
 	void clr_closed() {closed_ = 0;}
+	
+	
+	
+	
 protected:
 	virtual int window();
 	virtual double windowd();
@@ -536,6 +548,28 @@
 	int prev_highest_ack_ ; /* Used to determine if sender is */
 				/*  window-limited.  */
    	/* end of TCP quiescence */
+//CAPS	
+	int redunPkt_;
+	int sendmark;
+	int r_codeseqno;
+	int r_subseqno;
+	int newpktnum;
+	int rre_subseqno;
+	int retranflag;
+	int lfThresholdPkt_;
+	int codeflag;
+	double new_rtt;
+	double all_rtt;
+	double avg_rtt;
+        int c_pktnum;
+        int cu_num;
+        int e_lfnum; 
+//CAPS
+	PacketQueue *bufq_;
+	void bufferpacket(Packet*);
+	Packet* generatepacket(Packet*,int r_subseqno,int retranflag);
+	Packet* newpacket(Packet*,int r_subseqno);
+	
 };
 
 /* TCP Reno */
--- /home/hjb/CAPS/ns-allinone-2.35/ns-2.35/tcp/tcp.cc	2011-06-19 21:51:46.000000000 -0700
+++ /home/hjb/CAPS/ns-allinone-2.35-CAPS-dark/ns-2.35/tcp/tcp.cc	2019-05-23 23:47:37.598187396 -0700
@@ -76,7 +76,9 @@
 	  first_decrease_(1), fcnt_(0), nrexmit_(0), restart_bugfix_(1), 
           cong_action_(0), ecn_burst_(0), ecn_backoff_(0), ect_(0), 
           use_rtt_(0), qs_requested_(0), qs_approved_(0),
-	  qs_window_(0), qs_cwnd_(0), frto_(0)
+	  qs_window_(0), qs_cwnd_(0), frto_(0),
+//CAPS
+	  bufq_(new PacketQueue), sendmark(0),r_codeseqno(1),r_subseqno(1),newpktnum(0),rre_subseqno(1),codeflag(1),retranflag(0)
 {
 #ifdef TCP_DELAY_BIND_ALL
         // defined since Dec 1999.
@@ -101,6 +103,9 @@
         bind("necnresponses_", &necnresponses_);
         bind("ncwndcuts_", &ncwndcuts_);
 	bind("ncwndcuts1_", &ncwndcuts1_);
+//CAPS
+	bind("redunPkt_", &redunPkt_);
+	bind("lfThresholdPkt_", &lfThresholdPkt_);
 #endif /* TCP_DELAY_BIND_ALL */
 
 }
@@ -212,6 +217,9 @@
         delay_bind_init_one("necnresponses_");
         delay_bind_init_one("ncwndcuts_");
 	delay_bind_init_one("ncwndcuts1_");
+//CAPS
+	delay_bind_init_one("redunPkt_");
+	delay_bind_init_one("lfThresholdPkt_");
 #endif /* TCP_DELAY_BIND_ALL */
 
 	Agent::delay_bind_init_all();
@@ -324,6 +332,9 @@
         if (delay_bind(varName, localName, "necnresponses_", &necnresponses_ , tracer)) return TCL_OK;
         if (delay_bind(varName, localName, "ncwndcuts_", &ncwndcuts_ , tracer)) return TCL_OK;
  	if (delay_bind(varName, localName, "ncwndcuts1_", &ncwndcuts1_ , tracer)) return TCL_OK;
+//CAPS
+	if (delay_bind(varName, localName, "redunPkt_", &redunPkt_ , tracer)) return TCL_OK;
+	if (delay_bind(varName, localName, "lfThresholdPkt_", &lfThresholdPkt_ , tracer)) return TCL_OK;
 
 #endif
 
@@ -654,6 +665,7 @@
 	int databytes = hdr_cmn::access(p)->size();
 	tcph->seqno() = seqno;
 	tcph->ts() = Scheduler::instance().clock();
+	
 	int is_retransmit = (seqno < maxseq_);
  
 	// Mark packet for diagnosis purposes if we are in Quick-Start Phase
@@ -763,6 +775,7 @@
 		hdr_cmn::access(p)->size() += headersize();
 	}
         hdr_cmn::access(p)->size();
+	
 
 	/* if no outstanding data, be sure to set rtx timer again */
 	if (highest_ack_ == maxseq_)
@@ -772,7 +785,57 @@
 
         ++ndatapack_;
         ndatabytes_ += databytes;
-	send(p, 0);
+//CAPS
+	if(seqno > 0 && codeflag == 1) {      //CAPS-dark
+		if(is_retransmit == 0) {
+			if(r_subseqno > codeUnit_ + redunPkt_) {
+				r_subseqno =1;
+			}
+			retranflag = 0;
+			//the end packet for this codeUnit_
+			if((HDR_TCP(p)->seqno_) % codeUnit_ == 0){ 
+				newpktnum = 0;
+				Packet *p1 = generatepacket(p, r_subseqno,retranflag);
+				send(p1,0);
+				r_subseqno++;
+				for(newpktnum = 0;newpktnum < (redunPkt_ / codeUnit_ + redunPkt_ % codeUnit_);newpktnum++){
+					Packet *p2= p1->copy();
+					p2 = newpacket(p2, r_subseqno);
+					send(p2,0);
+					r_subseqno++;
+				}  
+			} else {
+				newpktnum = 0;
+				Packet *p1 = generatepacket(p, r_subseqno,retranflag);
+				send(p1,0);
+				r_subseqno++;
+				for(newpktnum = 0;newpktnum < (redunPkt_ / codeUnit_);newpktnum++){
+					Packet *p2 = p1->copy();
+					p2 = newpacket(p2, r_subseqno);
+					send(p2,0);
+					r_subseqno++;
+				} 
+			}  	
+		} else {
+		        retranflag = 1;
+			newpktnum = 0;
+			rre_subseqno = 1;
+			Packet *pr = generatepacket(p,rre_subseqno,retranflag);
+			send(pr,0);
+			rre_subseqno++;
+			for(newpktnum = 0;newpktnum < redunPkt_;newpktnum++){
+				Packet *p2 = pr->copy();
+				p2 = newpacket(p2, rre_subseqno);
+				send(p2,0);
+				rre_subseqno++;
+				newpktnum++;						
+			} 		
+		}
+	
+	} else {
+		send(p, 0);
+	}
+	
 	if (seqno == curseq_ && seqno > maxseq_)
 		idle();  // Tell application I have sent everything so far
 	if (seqno > maxseq_) {
@@ -792,8 +855,32 @@
 	if (!(rtx_timer_.status() == TIMER_PENDING) || force_set_rtx_timer)
 		/* No timer pending.  Schedule one. */
 		set_rtx_timer();
+	
 }
 
+//CAPS
+Packet* TcpAgent::generatepacket(Packet *p, int r_subseqno,int retranflag) {
+	hdr_tcp *tcph = hdr_tcp::access(p); 
+	tcph->codeflag_ = 1;
+	if((tcph->seqno_) % codeUnit_ == 0)
+	      r_codeseqno = (tcph->seqno_)/codeUnit_;
+	else 
+	      r_codeseqno = (tcph->seqno_)/codeUnit_ + 1;
+	tcph->codeseqno_ = r_codeseqno;
+	tcph->subseqno_ = r_subseqno;  
+	if(retranflag == 1)
+	      tcph->retranmark_ =  1;
+	else
+	      tcph->retranmark_ =  0;
+	return p;  
+}  
+
+Packet* TcpAgent::newpacket(Packet *p, int r_subseqno) {
+	hdr_tcp *tcph = hdr_tcp::access(p); 
+	tcph->subseqno_ = r_subseqno;  
+	return p;  
+} 
+
 /*
  * Must convert bytes into packets for one-way TCPs.
  * If nbytes == -1, this corresponds to infinite send.  We approximate
@@ -801,6 +888,7 @@
  */
 void TcpAgent::sendmsg(int nbytes, const char* /*flags*/)
 {
+
 	if (nbytes == -1 && curseq_ <= TCP_MAXSEQ)
 		curseq_ = TCP_MAXSEQ; 
 	else
@@ -1353,6 +1441,7 @@
 {
 	double now = Scheduler::instance().clock();
 	hdr_tcp *tcph = hdr_tcp::access(pkt);
+
 	/* 
 	 * Wouldn't it be better to set the timer *after*
 	 * updating the RTT, instead of *before*? 
@@ -1589,7 +1678,7 @@
 void
 TcpAgent::dupack_action()
 {
-	int recovered = (highest_ack_ > recover_);
+  	int recovered = (highest_ack_ > recover_);
 	if (recovered || (!bug_fix_ && !ecn_) || 
 		(bugfix_ss_ && highest_ack_ == 0)) {
 		// (highest_ack_ == 0) added to allow Fast Retransmit
@@ -1776,7 +1865,11 @@
  */
 void TcpAgent::recv(Packet *pkt, Handler*)
 {
-	hdr_tcp *tcph = hdr_tcp::access(pkt);
+        hdr_tcp *tcph = hdr_tcp::access(pkt);
+//CAPS
+	int databytes = hdr_cmn::access(pkt)->size();   
+	double now = Scheduler::instance().clock();    
+
 	int valid_ack = 0;
 	if (qs_approved_ == 1 && tcph->seqno() > last_ack_) 
 		endQuickStart();
@@ -1796,6 +1889,25 @@
 		Packet::free(pkt);
 		return;
 	}
+//CAPS
+	if ( tcph->seqno() > 0 ) {
+		new_rtt = now - tcph->ts_echo();
+		all_rtt += new_rtt;
+		c_pktnum++;
+		avg_rtt = all_rtt / c_pktnum;
+		if((new_rtt  >= 0.0002) && (new_rtt > 2*avg_rtt)) {
+			e_lfnum++;
+		}
+		if ((redunPkt_ < (int) 1.0*codeUnit_ / 5) && ((1 - 1.0*e_lfnum/c_pktnum) > 0 ) ) { 
+			redunPkt_ = (int) (1.0*codeUnit_ / (1 - 1.0*e_lfnum/c_pktnum)) - codeUnit_;
+		} else {
+			redunPkt_ = (int) 1.0*codeUnit_ / 5;
+		}
+	}
+	if(last_ack_ > lfThresholdPkt_) {
+		codeflag = 0;
+	}
+
 	++nackpack_;
 	ts_peer_ = tcph->ts();
 	int ecnecho = hdr_flags::access(pkt)->ecnecho();
@@ -1814,7 +1926,7 @@
                         tcp_eln(pkt);
                         return;
                 }
-		if (++dupacks_ == numdupacks_ && !noFastRetrans_) {
+		if (++dupacks_ == numdupacks_ && !noFastRetrans_) {		 
 			dupack_action();
 		} else if (dupacks_ < numdupacks_ && singledup_ ) {
 			send_one();
@@ -1944,7 +2056,7 @@
 
         if (++dupacks_ == eln_rxmit_thresh_ && ack > eln_last_rxmit_) {
                 /* Retransmit this packet */
-                output(last_ack_ + 1, TCP_REASON_DUPACK);
+	        output(last_ack_ + 1, TCP_REASON_DUPACK);
                 eln_last_rxmit_ = last_ack_+1;
         } else
                 send_much(0, 0, maxburst_);
--- /home/hjb/CAPS/ns-allinone-2.35/ns-2.35/tcp/tcp-sink.h	2010-04-03 13:40:15.000000000 -0700
+++ /home/hjb/CAPS/ns-allinone-2.35-CAPS-dark/ns-2.35/tcp/tcp-sink.h	2019-05-23 23:47:37.598187396 -0700
@@ -39,7 +39,8 @@
 #include <math.h>
 #include "agent.h"
 #include "tcp.h"
-
+//CAPS
+#include "queue.h"
 /* max window size */
 // #define MWS 1024  
 #define MWS 64
@@ -50,6 +51,8 @@
  * advertised window, should be less than MWM.  For Reno TCP, the
  * "window" parameter should be less than MWM/2.
  */
+int pktnum_renque[3000][2000];
+int pktnum_rdeque[3000][2000];
 
 class TcpSink;
 class Acker {
@@ -104,6 +107,7 @@
 	void reset();
 	int command(int argc, const char*const* argv);
 	TracedInt& maxsackblocks() { return max_sack_blocks_; }
+	void ppth();
 protected:
 	void ack(Packet*);
 	virtual void add_to_ack(Packet* pkt);
@@ -129,6 +133,12 @@
 	double lastreset_; 	/* W.N. used for detecting packets  */
 				/* from previous incarnations */
         int ecn_syn_;           /* allow SYN/ACK packets to be ECN-capable */
+//CAPS
+	int PerSFPktNum_;
+	PacketQueue *rbufq_;
+	void rbufferpacket(Packet*);
+	Packet* outputpacket(Packet*);
+	int endpktflag;
 
 };
 
--- /home/hjb/CAPS/ns-allinone-2.35/ns-2.35/tcp/tcp-sink.cc	2010-04-03 13:40:15.000000000 -0700
+++ /home/hjb/CAPS/ns-allinone-2.35-CAPS-dark/ns-2.35/tcp/tcp-sink.cc	2019-05-23 23:47:37.598187396 -0700
@@ -39,6 +39,7 @@
 #include "tcp-sink.h"
 #include "hdr_qs.h"
 
+
 static class TcpSinkClass : public TclClass {
 public:
 	TcpSinkClass() : TclClass("Agent/TCPSink") {}
@@ -177,7 +178,10 @@
 }
 
 TcpSink::TcpSink(Acker* acker) : Agent(PT_ACK), acker_(acker), save_(NULL),
-	lastreset_(0.0)
+	lastreset_(0.0),
+//CAPS	
+	rbufq_(new PacketQueue),endpktflag(0)
+	
 {
 	bytes_ = 0; 
 	bind("bytes_", &bytes_);
@@ -204,6 +208,9 @@
 	delay_bind_init_one("RFC2581_immediate_ack_");
 	delay_bind_init_one("SYN_immediate_ack_");
 	delay_bind_init_one("ecn_syn_");
+//CAPS
+	delay_bind_init_one("PerSFPktNum_");
+	
 #if defined(TCP_DELAY_BIND_ALL) && 0
         delay_bind_init_one("maxSackBlocks_");
 #endif /* TCP_DELAY_BIND_ALL */
@@ -222,6 +229,9 @@
         if (delay_bind_bool(varName, localName, "RFC2581_immediate_ack_", &RFC2581_immediate_ack_, tracer)) return TCL_OK;
         if (delay_bind_bool(varName, localName, "SYN_immediate_ack_", &SYN_immediate_ack_, tracer)) return TCL_OK;
 	if (delay_bind_bool(varName, localName, "ecn_syn_", &ecn_syn_ ,tracer)) return TCL_OK;
+//CAPS
+	if (delay_bind_bool(varName, localName, "PerSFPktNum_", &PerSFPktNum_ ,tracer)) return TCL_OK;
+	
 #if defined(TCP_DELAY_BIND_ALL) && 0
         if (delay_bind(varName, localName, "maxSackBlocks_", &max_sack_blocks_, tracer)) return TCL_OK;
 #endif /* TCP_DELAY_BIND_ALL */
@@ -273,7 +283,7 @@
 	hdr_tcp *otcp = hdr_tcp::access(opkt);
 	hdr_ip *oiph = hdr_ip::access(opkt);
 	hdr_tcp *ntcp = hdr_tcp::access(npkt);
-
+	
 	if (qs_enabled_) {
 		// QuickStart code from Srikanth Sundarrajan.
 		hdr_qs *oqsh = hdr_qs::access(opkt);
@@ -357,34 +367,76 @@
 
 void TcpSink::recv(Packet* pkt, Handler*)
 {
-	int numToDeliver;
-	int numBytes = hdr_cmn::access(pkt)->size();
+   
+	int numToDeliver;  
+	int numBytes;
 	// number of bytes in the packet just received
 	hdr_tcp *th = hdr_tcp::access(pkt);
+	hdr_ip *ith = hdr_ip::access(pkt);  
+	
 	/* W.N. Check if packet is from previous incarnation */
 	if (th->ts() < lastreset_) {
-		// Remove packet and do nothing
+	 	// Remove packet and do nothing
 		Packet::free(pkt);
 		return;
 	}
-	acker_->update_ts(th->seqno(),th->ts(),ts_echo_rfc1323_);
-	// update the timestamp to echo
-	
-      	numToDeliver = acker_->update(th->seqno(), numBytes);
-	// update the recv window; figure out how many in-order-bytes
-	// (if any) can be removed from the window and handed to the
-	// application
-	if (numToDeliver) {
-		bytes_ += numToDeliver;
-		recvBytes(numToDeliver);
-	}
-	// send any packets to the application
-      	ack(pkt);
-	// ACK the packet
-	Packet::free(pkt);
-	// remove it from the system
+//CAPS
+	if((int)th->seqno() > 0 && (int)th->codeflag_ == 1){    //CAPS-dark
+		if( (++pktnum_renque[ith->fid_][th->codeseqno_-1] <= codeUnit_ ) && endpktflag == 0){
+			outputpacket(pkt);
+			numBytes = hdr_cmn::access(pkt)->size();
+			acker_->update_ts(th->seqno(),th->ts(),ts_echo_rfc1323_);
+			// update the timestamp to echo	   
+			numToDeliver = acker_->update(th->seqno(), numBytes);
+			// update the recv window; figure out how many in-order-bytes
+			// (if any) can be removed from the window and handed to the
+			// application
+			if (numToDeliver) {
+				bytes_ += numToDeliver;
+				recvBytes(numToDeliver);
+			}
+			// send any packets to the application
+			ack(pkt);
+			// ACK the packet
+			Packet::free(pkt);
+			// remove it from the system
+		} else {
+			Packet::free(pkt);
+		} 
+	} else {
+		numBytes = hdr_cmn::access(pkt)->size();
+		acker_->update_ts(th->seqno(),th->ts(),ts_echo_rfc1323_);
+		// update the timestamp to echo	   
+		numToDeliver = acker_->update(th->seqno(), numBytes);
+		// update the recv window; figure out how many in-order-bytes
+		// (if any) can be removed from the window and handed to the
+		// application
+		if (numToDeliver) {
+			bytes_ += numToDeliver;
+			recvBytes(numToDeliver);
+		}
+		// send any packets to the application
+		ack(pkt);
+		// ACK the packet
+		Packet::free(pkt);
+		// remove it from the system
+	}  
 }
 
+
+Packet* TcpSink::outputpacket(Packet* p) {
+	hdr_tcp *ppth = hdr_tcp::access(p);	
+	hdr_ip *ppith = hdr_ip::access(p);
+	ppth->seqno() = (ppth->codeseqno_)*codeUnit_ - (codeUnit_ - 1) + pktnum_rdeque[ppith->fid_][ppth->codeseqno_-1];
+	pktnum_rdeque[ppith->fid_][ppth->codeseqno_-1]++;	
+	if(ppith->fid_ < shortFlowNum_){
+              if(pktnum_rdeque[ppith->fid_][ppth->codeseqno_-1] >= PerSFPktNum_)
+                    endpktflag = 1;
+	}
+	return p;
+}  
+
+
 static class DelSinkClass : public TclClass {
 public:
 	DelSinkClass() : TclClass("Agent/TCPSink/DelAck") {}
--- /home/hjb/CAPS/ns-allinone-2.35/ns-2.35/common/agent.cc	2010-03-07 21:54:49.000000000 -0800
+++ /home/hjb/CAPS/ns-allinone-2.35-CAPS-dark/ns-2.35/common/agent.cc	2019-05-23 23:47:37.598187396 -0700
@@ -86,6 +86,9 @@
 	delay_bind_init_one("flags_");
 	delay_bind_init_one("ttl_");
 	delay_bind_init_one("class_");
+//CAPS	
+	delay_bind_init_one("shortFlowNum_");
+	delay_bind_init_one("codeUnit_");
 	Connector::delay_bind_init_all();
 }
 
@@ -101,6 +104,12 @@
 	if (delay_bind(varName, localName, "flags_", (int*)&flags_, tracer)) return TCL_OK;
 	if (delay_bind(varName, localName, "ttl_", &defttl_, tracer)) return TCL_OK;
 	if (delay_bind(varName, localName, "class_", (int*)&fid_, tracer)) return TCL_OK;
+//CAPS
+	if (delay_bind(varName, localName, "shortFlowNum_", (int*)&shortFlowNum_, tracer)) return TCL_OK;
+	if (delay_bind(varName, localName, "codeUnit_", (int*)&codeUnit_, tracer)) return TCL_OK;
+	
+//	if (delay_bind(varName, localName, "shortPerFlowPktNum_", (int*)&shortPerFlowPktNum_, tracer)) return TCL_OK;
+	
 	return Connector::delay_bind_dispatch(varName, localName, tracer);
 }
 
--- /home/hjb/CAPS/ns-allinone-2.35/ns-2.35/common/agent.h	2011-08-26 12:26:39.000000000 -0700
+++ /home/hjb/CAPS/ns-allinone-2.35-CAPS-dark/ns-2.35/common/agent.h	2019-05-23 23:47:37.598187396 -0700
@@ -126,7 +126,10 @@
 	int prio_;			// for IPv6 prio field
 	int flags_;			// for experiments (see ip.h)
 	int defttl_;			// default ttl for outgoing pkts
-
+//CAPS
+        int shortFlowNum_;
+	int codeUnit_;
+	
 #ifdef notdef
 	int seqno_;		/* current seqno */
 	int class_;		/* class to place in packet header */
--- /home/hjb/CAPS/ns-allinone-2.35/ns-2.35/queue/mydrop-tail.h	1969-12-31 16:00:00.000000000 -0800
+++ /home/hjb/CAPS/ns-allinone-2.35-CAPS-dark/ns-2.35/queue/mydrop-tail.h	2019-05-23 23:47:37.626187395 -0700
@@ -0,0 +1,107 @@
+/* -*-	Mode:C++; c-basic-offset:8; tab-width:8; indent-tabs-mode:t -*- */
+/*
+ * Copyright (c) 1994 Regents of the University of California.
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ * 3. All advertising materials mentioning features or use of this software
+ *    must display the following acknowledgement:
+ *	This product includes software developed by the Computer Systems
+ *	Engineering Group at Lawrence Berkeley Laboratory.
+ * 4. Neither the name of the University nor of the Laboratory may be used
+ *    to endorse or promote products derived from this software without
+ *    specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+ * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+ * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+ * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ *
+ * @(#) $Header: /cvsroot/nsnam/ns-2/queue/drop-tail.h,v 1.19 2004/10/28 23:35:37 haldar Exp $ (LBL)
+ */
+
+#ifndef ns_drop_tail_h
+#define ns_drop_tail_h
+
+#include <string.h>
+#include "queue.h"
+#include "config.h"
+#include "timer-handler.h"
+#include "../classifier/hjbextra.h"
+
+class MYDropTail;
+
+class SampleTimer : public TimerHandler {
+public: 
+	SampleTimer(MYDropTail *a) : TimerHandler() { a_ = a; }
+protected:
+	virtual void expire(Event *e);
+	MYDropTail *a_;
+};
+
+/*
+ * A bounded, drop-tail queue
+ */
+class MYDropTail : public Queue {
+  public:
+	MYDropTail() { 
+                count=0;
+                suminter=0;
+		q_ = new PacketQueue; 
+		pq_ = q_;
+		bind_bool("drop_front_", &drop_front_);
+		bind_bool("summarystats_", &summarystats);
+		bind_bool("queue_in_bytes_", &qib_);  // boolean: q in bytes?
+		bind("mean_pktsize_", &mean_pktsize_);
+		//		_RENAMED("drop-front_", "drop_front_");
+                sample_timer_ = new SampleTimer(this);
+                set_rtx_timer();
+                
+	}
+	~MYDropTail() {
+		delete q_;
+	}
+        void queue_sample();
+    
+
+  protected:
+	void reset();
+	int command(int argc, const char*const* argv); 
+	void enque(Packet*);
+	Packet* deque();
+	void shrink_queue();	// To shrink queue and drop excessive packets.
+
+	PacketQueue *q_;	/* underlying FIFO queue */
+	int drop_front_;	/* drop-from-front (rather than from tail) */
+	int summarystats;
+	void print_summarystats();
+	int qib_;       	/* bool: queue measured in bytes? */
+	int mean_pktsize_;	/* configured mean packet size in bytes */
+        SampleTimer* sample_timer_;
+        void set_rtx_timer();
+        int  count; 
+        int suminter;  
+ 
+};
+
+
+
+void SampleTimer::expire(Event*)
+{
+        a_->queue_sample();
+}
+#endif
--- /home/hjb/CAPS/ns-allinone-2.35/ns-2.35/queue/mydrop-tail.cc	1969-12-31 16:00:00.000000000 -0800
+++ /home/hjb/CAPS/ns-allinone-2.35-CAPS-dark/ns-2.35/queue/mydrop-tail.cc	2019-05-23 23:47:37.626187395 -0700
@@ -0,0 +1,180 @@
+/* -*-	Mode:C++; c-basic-offset:8; tab-width:8; indent-tabs-mode:t -*- */
+/*
+ * Copyright (c) 1994 Regents of the University of California.
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ * 3. All advertising materials mentioning features or use of this software
+ *    must display the following acknowledgement:
+ *	This product includes software developed by the Computer Systems
+ *	Engineering Group at Lawrence Berkeley Laboratory.
+ * 4. Neither the name of the University nor of the Laboratory may be used
+ *    to endorse or promote products derived from this software without
+ *    specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+ * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+ * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+ * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ */
+
+//#ifndef lint
+//static const char rcsid[] =
+//    "@(#) $Header: /cvsroot/nsnam/ns-2/queue/drop-tail.cc,v 1.17 2004/10/28 23:35:37 haldar Exp $ (LBL)";
+//#endif
+
+#include "mydrop-tail.h"
+#include "tcp.h"
+#include "ip.h"
+
+static class MYDropTailClass : public TclClass {
+ public:
+	MYDropTailClass() : TclClass("Queue/MYDropTail") {}
+	TclObject* create(int, const char*const*) {
+		return (new MYDropTail);
+	}
+} class_drop_tail;
+
+void MYDropTail::reset()
+{
+	Queue::reset();
+}
+
+int 
+MYDropTail::command(int argc, const char*const* argv) 
+{
+	if (argc==2) {
+		if (strcmp(argv[1], "printstats") == 0) {
+			print_summarystats();
+			return (TCL_OK);
+		}
+ 		if (strcmp(argv[1], "shrink-queue") == 0) {
+ 			shrink_queue();
+ 			return (TCL_OK);
+ 		}
+	}
+	if (argc == 3) {
+		if (!strcmp(argv[1], "packetqueue-attach")) {
+			delete q_;
+			if (!(q_ = (PacketQueue*) TclObject::lookup(argv[2])))
+				return (TCL_ERROR);
+			else {
+				pq_ = q_;
+				return (TCL_OK);
+			}
+		}
+	}
+	return Queue::command(argc, argv);
+}
+void MYDropTail::queue_sample()
+{     
+           if(suminter==0)
+           {
+              count++;
+              if(count==2)
+              {
+                 changepath=1;
+              }
+          }
+	  else
+              { 
+		 suminter=0;   
+                 count=0;
+                 changepath=0;
+                
+             }
+           sample_timer_->resched(0.0005);
+           
+}
+
+void MYDropTail::set_rtx_timer()
+{
+	sample_timer_->resched(0.0);
+}
+
+
+void MYDropTail::enque(Packet* p)
+{
+        hdr_ip* iph=hdr_ip::access(p);
+	hdr_tcp *th = hdr_tcp::access(p);
+        int fid = iph->flowid();
+       
+ 	if((int)th->codeflag_ == 1 && hdr_cmn::access(p)->size() > 40){
+              suminter++;
+        }
+
+	if (summarystats) {
+                Queue::updateStats(qib_?q_->byteLength():q_->length());
+	}
+
+	int qlimBytes = qlim_ * mean_pktsize_;
+	if ((!qib_ && (q_->length() + 1) >= qlim_) ||
+  	(qib_ && (q_->byteLength() + hdr_cmn::access(p)->size()) >= qlimBytes)){
+		// if the queue would overflow if we added this packet...
+		if (drop_front_) { /* remove from head of queue */
+			q_->enque(p);
+			Packet *pp = q_->deque();
+			drop(pp);
+		} else {
+			drop(p);
+		}
+	} else {
+		q_->enque(p);
+	}
+}
+
+//AG if queue size changes, we drop excessive packets...
+void MYDropTail::shrink_queue() 
+{
+        int qlimBytes = qlim_ * mean_pktsize_;
+	if (debug_)
+		printf("shrink-queue: time %5.2f qlen %d, qlim %d\n",
+ 			Scheduler::instance().clock(),
+			q_->length(), qlim_);
+        while ((!qib_ && q_->length() > qlim_) || 
+            (qib_ && q_->byteLength() > qlimBytes)) {
+                if (drop_front_) { /* remove from head of queue */
+                        Packet *pp = q_->deque();
+                        drop(pp);
+                } else {
+                        Packet *pp = q_->tail();
+                        q_->remove(pp);
+                        drop(pp);
+                }
+        }
+     
+}
+
+
+Packet* MYDropTail::deque()
+{
+        if (summarystats && &Scheduler::instance() != NULL) {
+                Queue::updateStats(qib_?q_->byteLength():q_->length());
+        }
+	return q_->deque();
+  
+}
+
+void MYDropTail::print_summarystats()
+{
+        printf("True average queue: %5.3f", true_ave_);
+        if (qib_)
+                printf(" (in bytes)");
+        printf(" time: %5.3f\n", total_time_);
+}
+
+
--- /home/hjb/CAPS/ns-allinone-2.35/ns-2.35/Makefile	2019-05-23 21:57:56.334434345 -0700
+++ /home/hjb/CAPS/ns-allinone-2.35-CAPS-dark/ns-2.35/Makefile	2019-05-23 23:47:37.626187395 -0700
@@ -216,7 +216,7 @@
         dccp/dccp_tfrc.o \
 	tools/integrator.o tools/queue-monitor.o \
 	tools/flowmon.o tools/loss-monitor.o \
-	queue/queue.o queue/drop-tail.o \
+	queue/queue.o queue/drop-tail.o queue/mydrop-tail.o \
 	adc/simple-intserv-sched.o queue/red.o \
 	queue/semantic-packetqueue.o queue/semantic-red.o \
 	tcp/ack-recons.o \
